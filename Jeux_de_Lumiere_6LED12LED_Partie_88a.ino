//**************************************************************************************************************************************************************************
//********************************************** Jeux de Lumière 6 LED 12 LED - Partie 88a - Carte Nano (com49) ************************************************************
//**************************************************************************************************************************************************************************
// Auteur : Serge Ducatez - 01/2022
// https://www.youtube.com/channel/UCyGEFYW18IZKpe4uPgp9b8g/videos
// https://www.facebook.com/serge.ducatez.7/photos_albums
//**************************************************************************************************************************************************************************
// Configurez l'affichage de l'IDE à 150%.
//**************************************************************************************************************************************************************************
// ATTENTION : Programme à tester sur Arduino Mega.
//**************************************************************************************************************************************************************************
// Tableaux des combinaisons des équations pour les manipulations du tableau buffer en SRAM.
//**************************************************************************************************************************************************************************
// Bouton poussoir "BrocheBPModePlus" pour incrémenter le mode courant.
// Bouton poussoir "BrocheBPModeMoins" pour décrémenter le mode courant.
// Bouton poussoir BrocheBPModeAuto" pour activer ou désactiver le mode automatique d'affichages.
// Affichage du mode courant d'affichage sur un écran OLED 1.3" (128x64) SH1106.
// Affichage du mode manuel ou automatique sur l'écran OLED.
// Utilisation de la librairie "U8x8lib.h".
//**************************************************************************************************************************************************************************
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Paramètres modifiables
//**************************************************************************************************************************************************************************
#include "PinChangeInterrupt.h"                                                                                                 // Librairie pour la gestion des interruptions de changement de broche
#include <Wire.h>                                                                                                               // Librairie pour la gestion de la communication I2C avec l'afficheur OLED 1.3" (128x64) SH1106
#include <U8x8lib.h>                                                                                                            // Librairie pour la gestion de l'afficheur OLED 1.3" (128x64) SH1106
#include <avr/pgmspace.h>                                                                                                       // Librairie pour la gestion de la mémoire flash

#define BrocheBuzzer                A0                                                                                          // Broche du buzzer 5v
#define BrocheLED_D2                 2                                                                                          // Broche de la LED D2  (PD2)
#define BrocheLED_D3                 3                                                                                          // Broche de la LED D3  (PD3)
#define BrocheLED_D4                 4                                                                                          // Broche de la LED D4  (PD4)
#define BrocheLED_D5                 5                                                                                          // Broche de la LED D5  (PD5)
#define BrocheLED_D6                 6                                                                                          // Broche de la LED D6  (PD6)
#define BrocheLED_D7                 7                                                                                          // Broche de la LED D7  (PD7)
#define BrocheLED_D8                 8                                                                                          // Broche de la LED D8  (PB0)
#define BrocheLED_D9                 9                                                                                          // Broche de la LED D9  (PB1)
#define BrocheLED_D10               10                                                                                          // Broche de la LED D10 (PB2)
#define BrocheLED_D11               11                                                                                          // Broche de la LED D11 (PB3)
#define BrocheLED_D12               12                                                                                          // Broche de la LED D12 (PB4)
#define BrocheLED_D13               13                                                                                          // Broche de la LED D13 (PB5)
#define BrocheReglagePotentiometre  A6                                                                                          // Broche de l'entrée analogique (A6) pour le réglage de la fréquence ou du rapport cyclique par le potentiomètre
#define BrocheBPModePlus            A1                                                                                          // Broche du bouton poussoir "BPModePlus"
#define BrocheBPModeMoins           A2                                                                                          // Broche du bouton poussoir "BPModeMoins"
#define BrocheBPModeAuto            A3                                                                                          // Broche du bouton poussoir "ModeAuto"

volatile int ModeCourant = 0;                                                                                                   // Mode courant
volatile int DernierModeCourant = -1;                                                                                           // Dernier mode courant
volatile const int NombreModesMax = 1; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de modes maximum

volatile bool SortieModeCourant = false;                                                                                        // Indicateur de sortie du mode courant

volatile bool ModeAuto = false;                                                                                                 // Indicateur du mode automatique
volatile int compteurAffichageModeCourant = 0;                                                                                  // Compteur d'affichages du mode courant en mode automatique
volatile const int NombreAffichageModeCourant = 3;                                                                              // Nombre d'affichages du mode courant en mode automatique
volatile int MultipleNombreAffichageModeCourant = 1;                                                                            // Multiple du nombre d'affichages du mode courant en mode automatique
volatile bool AffichageModeManuel = true;                                                                                       // Indicateur d'affichage du mode manuel sur l'écran OLED
volatile bool AffichageModeAuto = false;                                                                                        // Indicateur d'affichage du mode auto sur l'écran OLED

volatile const unsigned long DureeAntiRebond = 5ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Durée de l'anti-rebonds des boutons poussoirs "BPModePlus" et "BPModeMoins" en ms

int PointeurTableauBrochesLED;                                                                                                  // Pointeur des tableaux des broches de 6 LED
const int TableauBrochesLED_D2D7 [] = {2, 3, 4, 5, 6, 7}; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau des broches des 6 LED de (D2 à D7)
const int TableauBrochesLED_D8D13 [] = {8, 9, 10, 11, 12, 13}; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau des broches des 6 LED de (D8 à D13)
int PointeurTableauBroches12LED;                                                                                                // Pointeur du tableau des broches 12 LED
const int TableauBroches12LED [] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau des broches des 12 LED

unsigned long DureeHIGH_LOW;                                                                                                    // Temporisation de la LED activée ou désactivée

int Selecteur_FonctionManipulationsTableau_buffer = 0;                                                                          // Sélecteur de fonctions de manipulations du tableau buffer
int Selecteur_Combinaisons_Equations = 0;                                                                                       // Sélecteur des tableaux des combinaisons des équations pour les manipulations du tableau buffer
int LigneCourante_Combinaisons_Equations = 0;                                                                                   // Ligne courante du tableau des combinaisons des équations pour les manipulations du tableau buffer
const int NombreLignes_Combinaisons_Equations = 24; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de lignes du tableau des combinaisons des équations pour les manipulations du tableau buffer
int ColonneCourante_Combinaisons_Equations = 0;                                                                                 // Colonne courante du tableau des combinaisons des équations pour les manipulations du tableau buffer
const int NombreColonnes_Combinaisons_Equations = 4; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de colonnes du tableau des combinaisons des équations pour les manipulations du tableau buffer
int buffer_Combinaisons_Equations [4];                                                                                          // Tableau buffer contenant les lignes des tableau des combinaisons des équations pour les manipulations du tableau buffer

const int PROGMEM Combinaisons_Equations [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau des combinaisons des équations pour les manipulations du tableau buffer
   1, 3, 0, 2, // 0
   1, 2, 0, 3, // 1
   1, 0, 3, 2, // 2
   1, 0, 2, 3, // 3
   1, 3, 2, 0, // 4
   1, 2, 3, 0, // 5
   
   0, 1, 2, 3, // 6
   0, 2, 3, 1, // 7
   0, 3, 1, 2, // 8
   0, 3, 2, 1, // 9
   0, 1, 3, 2, // 10
   0, 2, 1, 3, // 11
   
   2, 3, 0, 1, // 12
   2, 0, 3, 1, // 13
   2, 1, 0, 3, // 14
   2, 1, 3, 0, // 15
   2, 0, 1, 3, // 16
   2, 3, 1, 0, // 17
   
   3, 0, 1, 2, // 18
   3, 1, 0, 2, // 19
   3, 2, 1, 0, // 20
   3, 2, 0, 1, // 21
   3, 1, 2, 0, // 22
   3, 0, 2, 1  // 23
};

const int PROGMEM Combinaisons_Equations1 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 1 des combinaisons des équations pour les manipulations du tableau buffer
   0, 2, 1, 3, // 0
   0, 2, 3, 1, // 1
   0, 1, 2, 3, // 2
   0, 1, 3, 2, // 3
   0, 3, 1, 2, // 4
   0, 3, 2, 1, // 5
   
   1, 2, 0, 3, // 6
   1, 2, 3, 0, // 7
   1, 0, 2, 3, // 8
   1, 0, 3, 2, // 9
   1, 3, 0, 2, // 10
   1, 3, 2, 0, // 11
   
   2, 1, 0, 3, // 12
   2, 1, 3, 0, // 13
   2, 0, 1, 3, // 14
   2, 0, 3, 1, // 15
   2, 3, 0, 1, // 16
   2, 3, 1, 0, // 17
   
   3, 1, 0, 2, // 18
   3, 1, 2, 0, // 19
   3, 0, 1, 2, // 20
   3, 0, 2, 1, // 21
   3, 2, 0, 1, // 22
   3, 2, 1, 0  // 23
};

const int PROGMEM Combinaisons_Equations2 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 2 des combinaisons des équations pour les manipulations du tableau buffer
   2, 1, 0, 3, // 0
   2, 1, 3, 0, // 1
   2, 0, 1, 3, // 2
   2, 0, 3, 1, // 3
   2, 3, 0, 1, // 4
   2, 3, 1, 0, // 5
   
   1, 2, 0, 3, // 6
   1, 2, 3, 0, // 7
   1, 0, 2, 3, // 8
   1, 0, 3, 2, // 9
   1, 3, 0, 2, // 10
   1, 3, 2, 0, // 11
   
   3, 1, 0, 2, // 12
   3, 1, 2, 0, // 13
   3, 0, 1, 2, // 14
   3, 0, 2, 1, // 15
   3, 2, 0, 1, // 16
   3, 2, 1, 0, // 17
   
   0, 2, 1, 3, // 18
   0, 2, 3, 1, // 19
   0, 1, 2, 3, // 20
   0, 1, 3, 2, // 21
   0, 3, 1, 2, // 22
   0, 3, 2, 1  // 23
};

const int PROGMEM Combinaisons_Equations3 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 3 des combinaisons des équations pour les manipulations du tableau buffer
   1, 3, 0, 2, // 0
   1, 2, 0, 3, // 1
   1, 0, 3, 2, // 2
   1, 0, 2, 3, // 3
   1, 3, 2, 0, // 4
   1, 2, 3, 0, // 5
   
   0, 1, 2, 3, // 6
   0, 2, 3, 1, // 7
   0, 3, 1, 2, // 8
   0, 3, 2, 1, // 9
   0, 1, 3, 2, // 10
   0, 2, 1, 3, // 11
   
   3, 0, 1, 2, // 12
   3, 1, 0, 2, // 13
   3, 2, 1, 0, // 14
   3, 2, 0, 1, // 15
   3, 1, 2, 0, // 16
   3, 0, 2, 1, // 17
   
   2, 3, 0, 1, // 18
   2, 0, 3, 1, // 19
   2, 1, 0, 3, // 20
   2, 1, 3, 0, // 21
   2, 0, 1, 3, // 22
   2, 3, 1, 0  // 23
};

const int PROGMEM Combinaisons_Equations4 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 4 des combinaisons des équations pour les manipulations du tableau buffer
   3, 0, 1, 2, // 0
   3, 1, 0, 2, // 1
   3, 2, 1, 0, // 2
   3, 2, 0, 1, // 3
   3, 1, 2, 0, // 4
   3, 0, 2, 1, // 5
   
   2, 3, 0, 1, // 6
   2, 0, 3, 1, // 7
   2, 1, 0, 3, // 8
   2, 1, 3, 0, // 9
   2, 0, 1, 3, // 10
   2, 3, 1, 0, // 11
   
   0, 1, 2, 3, // 12
   0, 2, 3, 1, // 13
   0, 3, 1, 2, // 14
   0, 3, 2, 1, // 15
   0, 1, 3, 2, // 16
   0, 2, 1, 3, // 17
   
   1, 3, 0, 2, // 18
   1, 2, 0, 3, // 19
   1, 0, 3, 2, // 20
   1, 0, 2, 3, // 21
   1, 3, 2, 0, // 22
   1, 2, 3, 0  // 23
};

const int PROGMEM Combinaisons_Equations5 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 5 des combinaisons des équations pour les manipulations du tableau buffer
   3, 1, 0, 2, // 0
   3, 1, 2, 0, // 1
   3, 0, 1, 2, // 2
   3, 0, 2, 1, // 3
   3, 2, 0, 1, // 4
   3, 2, 1, 0, // 5
   
   2, 1, 0, 3, // 6
   2, 1, 3, 0, // 7
   2, 0, 1, 3, // 8
   2, 0, 3, 1, // 9
   2, 3, 0, 1, // 10
   2, 3, 1, 0, // 11
   
   1, 2, 0, 3, // 12
   1, 2, 3, 0, // 13
   1, 0, 2, 3, // 14
   1, 0, 3, 2, // 15
   1, 3, 0, 2, // 16
   1, 3, 2, 0, // 17
   
   0, 2, 1, 3, // 18
   0, 2, 3, 1, // 19
   0, 1, 2, 3, // 20
   0, 1, 3, 2, // 21
   0, 3, 1, 2, // 22
   0, 3, 2, 1  // 23
};

const int PROGMEM Combinaisons_Equations6 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 6 des combinaisons des équations pour les manipulations du tableau buffer
   3, 1, 2, 0, // 0
   1, 3, 2, 0, // 1
   3, 2, 1, 0, // 2
   2, 3, 1, 0, // 3
   2, 1, 3, 0, // 4
   1, 2, 3, 0, // 5
   
   3, 0, 2, 1, // 6
   0, 3, 2, 1, // 7
   3, 2, 0, 1, // 8
   2, 3, 0, 1, // 9
   2, 0, 3, 1, // 10
   0, 2, 3, 1, // 11
   
   3, 0, 1, 2, // 12
   0, 3, 1, 2, // 13
   3, 1, 0, 2, // 14
   1, 3, 0, 2, // 15
   1, 0, 3, 2, // 16
   0, 1, 3, 2, // 17
   
   2, 0, 1, 3, // 18
   0, 2, 1, 3, // 19
   2, 1, 0, 3, // 20
   1, 2, 0, 3, // 21
   1, 0, 2, 3, // 22
   0, 1, 2, 3  // 23
};

const byte NombreLED = 12; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de LED
int SequenceCouranteLED = 0;                                                                                                    // Séquence courante des LED affichées

bool buffer_TableauSequencesLED [12];                                                                                           // Tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
int pt_buffer_TableauSequencesLED;                                                                                              // Pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
bool buffer1_TableauSequencesLED [12];                                                                                          // Tableau buffer 1 contenant les lignes des tableaux des séquences d'affichage des LED
bool LigneNulle = false;                                                                                                        // Indicateur de ligne d'un tableau des séquences d'affichage des LED dont les colonnes sont toutes à "0"

const byte NombreSequencesLED1 = 48; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED1 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 1 des séquences d'affichage des LED (Tableau 1 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 1
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 2
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 3
  0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 4
  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 5
  0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, // 6
  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 7
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 8
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 9
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 10
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 11
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 12
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 13
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 14
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 15
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 16
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 17
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 18
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 19
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 20
  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 21
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 22
  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 23
  0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, // 24
  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 25
  0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, // 26
  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 27
  0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, // 28
  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 29
  0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 30
  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 31
  0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 32
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 33
  0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 34
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 35
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 36
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 37
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 38
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 39
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 40
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 41
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 42
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 43
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 44
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 45
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 46
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 47
};

const byte NombreSequencesLED2 = 32; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED2 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 2 des séquences d'affichage des LED (Tableau 2 inversé)
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 0
  1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 1
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 2
  1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 3
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, // 4
  1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 5
  0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, // 6
  1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 7
  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, // 8
  1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, // 9
  0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, // 10
  1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 11
  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, // 12
  1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 13
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 14
  1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 15
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16
  1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 17
  0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 18
  1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, // 19
  0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 20
  1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, // 21
  0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 22
  1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, // 23
  0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 24
  1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 25
  0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, // 26
  1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, // 27
  0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 28
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 29
  0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 30
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 31
};

const byte NombreSequencesLED3 = 24; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED3 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 3 des séquences d'affichage des LED (Tableau 3 inversé)
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 0
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 1
  1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 2
  1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 3
  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 4
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 5
  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 6
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 7
  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 8
  1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 9
  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 10
  1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 11
  1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 12
  1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 13
  1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 14
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 15
  1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 16
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 17
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 18
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 19
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 20
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 21
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 22
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 23
};

const byte NombreSequencesLED4 = 10; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED4 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 4 des séquences d'affichage des LED (Tableau 4 inversé)
  0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 0
  1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, // 1
  1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, // 2
  1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 3
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 4
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 5
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 6
  1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 7
  1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, // 8
  1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1  // 9
};

const byte NombreSequencesLED5 = 24; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED5 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 5 des séquences d'affichage des LED (Tableau 5 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 0
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 1
  0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 2
  0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 3
  0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 4
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 5
  0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 6
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 7
  0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 8
  0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 9
  0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 10
  0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 11
  0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 12
  0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 13
  0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 14
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 15
  0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 16
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 17
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 18
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 19
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 20
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 21
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 22
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 23
};

const byte NombreSequencesLED6 = 35; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED6 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 6 des séquences d'affichage des LED (Tableau 6 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 0
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 1
  0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 2
  0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 3
  0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 4
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 5
  0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 6
  0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, // 7
  0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, // 8
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 9
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 10
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 11
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 12
  1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 13
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 14
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 15
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 16
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 17
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 18
  1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 19
  1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 20
  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 21
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 22
  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 23
  0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 24
  0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, // 25
  0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, // 26
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 27
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 28
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 29
  1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 30
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 31
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 32
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 33
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 34
};

const byte NombreSequencesLED7 = 28; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED7 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 7 des séquences d'affichage des LED (Tableau 7 inversé)
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 0
  1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 1
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 2
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 3
  0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 4
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 5
  1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 6
  0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 7
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 8
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 9
  0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 10
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 11
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 12
  1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 13
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 14
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 15
  0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 16
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 17
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 18
  0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 19
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 20
  1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 21
  0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 22
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 23
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 24
  1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 25
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 26
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0  // 27
};

const byte NombreSequencesLED8 = 4; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED8 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 8 des séquences d'affichage des LED (Tableau 8 inversé)
  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 0
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 1
  1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 2
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 3
};

const byte NombreSequencesLED9 = 66; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED9 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 9 des séquences d'affichage des LED (Tableau 9 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 1
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 2
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 3
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 4
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 5
  1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 6
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 7
  1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 8
  1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 9
  1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 10
  1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 11
  0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 12
  1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 13
  0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 14
  0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, // 15
  0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 16
  0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, // 17
  1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 18
  0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, // 19
  1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 20
  1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, // 21
  1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 22
  1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, // 23
  0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, // 24
  1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, // 25
  0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, // 26
  0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, // 27
  0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, // 28
  0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, // 29
  1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, // 30
  0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, // 31
  1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, // 32
  1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, // 33
  1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, // 34
  1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, // 35
  1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, // 36
  1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, // 37
  1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, // 38
  1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, // 39
  1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, // 40
  1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, // 41
  1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, // 42
  1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, // 43
  1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, // 44
  1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, // 45
  1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, // 46
  1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, // 47
  1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, // 48
  1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, // 49
  1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, // 50
  1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, // 51
  1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, // 52
  1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, // 53
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, // 54
  1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, // 55
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, // 56
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 57
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, // 58
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 59
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 60
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 61
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 62
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 63
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 64
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 65
};

const byte NombreSequencesLED10 = 27; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED10 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 10 des séquences d'affichage des LED (Slide gauche à droite) (Tableau 10 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 1
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 2
  1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 3
  1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 4
  1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 5
  0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, // 6
  0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, // 7
  0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, // 8
  1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, // 9
  1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, // 10
  1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, // 11
  0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, // 12
  0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, // 13
  0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, // 14
  1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, // 15
  1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, // 16
  1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, // 17
  1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, // 18
  1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, // 19
  1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, // 20
  1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 21
  1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, // 22
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 23
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 24
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 25
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 26
};

const byte NombreSequencesLED11 = 45; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED11 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 11 des séquences d'affichage des LED (Slide gauche à droite) (Tableau 11 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 1
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 2
  0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 3
  1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 4
  1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 5
  1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 6
  0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 7
  0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 8
  1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, // 9
  0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, // 10
  0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, // 11
  1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 12
  1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, // 13
  1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, // 14
  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, // 15
  0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, // 16
  1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, // 17
  0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, // 18
  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 19
  1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, // 20
  1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 21
  1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, // 22
  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 23
  1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, // 24
  1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 25
  1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, // 26
  1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 27
  1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, // 28
  1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, // 29
  1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, // 30
  1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 31
  1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, // 32
  1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, // 33
  1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, // 34
  1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, // 35
  1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, // 36
  1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, // 37
  1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, // 38
  1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, // 39
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, // 40
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, // 41
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 42
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 43
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0  // 44
};

const byte NombreSequencesLED12 = 21; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED12 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 12 des séquences d'affichage des LED (Slide gauche à droite) (Tableau 12 inversé)
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 1
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 2
  1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 3
  1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 4
  1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 5
  1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 6
  1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 7
  1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, // 8
  1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, // 9
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 10
  1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, // 11
  1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, // 12
  1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, // 13
  1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, // 14
  1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 15
  1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, // 16
  1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, // 17
  1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 18
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 19
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0  // 20
};

const byte NombreSequencesLED13 = 14; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED13 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 13 des séquences d'affichage des LED (Tableau 13 inversé)
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 0
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 1
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 2
  1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 3
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 4
  1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, // 5
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 6
  0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 7
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 8
  1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, // 9
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 10
  1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 11
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 12
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1  // 13
};

const byte NombreSequencesLED14 = 16; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED14 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 14 des séquences d'affichage des LED (Tableau 14 inversé)
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 0
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 1
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 2
  1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 3
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 4
  1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, // 5
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 6
  0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 7
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 8
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 9
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 10
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 11
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 12
  0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 13
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 14
  0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0  // 15
};

const byte NombreSequencesLED15 = 12; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED15 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 15 des séquences d'affichage des LED (Tableau 15 inversé)
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 0
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 1
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 2
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 3
  1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 4
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 5
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 6
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 7
  1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 8
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 9
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 10
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 11
};

const byte NombreSequencesLED16 = 54; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED16 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 16 des séquences d'affichage des LED (Tableau 16 inversé)
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 0
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 1
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 2
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 3
  1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 4
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 5
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 6
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 7
  1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 8
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 9
  1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, // 10
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 11
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 12
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 13
  1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 14
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 15
  1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, // 16
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 17
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 18
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 19
  1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, // 20
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 21
  1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, // 22
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 23
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 24
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 25
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 26
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 27
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 28
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 29
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 30
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 31
  1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, // 32
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 33
  1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, // 34
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 35
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 36
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 37
  1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, // 38
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 39
  1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 40
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 41
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 42
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 43
  1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, // 44
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 45
  1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 46
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 47
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 48
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 49
  1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 50
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 51
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 52
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 53
};

const byte NombreSequencesLED17 = 22; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED17 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 17 des séquences d'affichage des LED (Tableau 17 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 1
  1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 2
  1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 3
  0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 4
  0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, // 5
  1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 6
  1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, // 7
  0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, // 8
  0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, // 9
  1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, // 10
  1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, // 11
  1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, // 12
  1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, // 13
  1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, // 14
  1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, // 15
  1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, // 16
  1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, // 17
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, // 18
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 19
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 20
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 21
};

const byte NombreSequencesLED18 = 15; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED18 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 18 des séquences d'affichage des LED (Slide gauche à droite) (Tableau 18 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 1
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 2
  1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 3
  1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 4
  1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 5
  0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, // 6
  0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, // 7
  0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, // 8
  1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, // 9
  1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, // 10
  1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, // 11
  0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, // 12
  0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, // 13
  0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1  // 14 => 9
};

const byte NombreSequencesLED19 = 36; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED19 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 19 des séquences d'affichage des LED (Tableau 19 inversé)
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0
  1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 1
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 2
  1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 3
  1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 4
  1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 5
  1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 6
  1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, // 7
  1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 8
  1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, // 9
  1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, // 10
  1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, // 11
  1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, // 12
  1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 13
  1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, // 14
  1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, // 15
  1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 16
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 17
  1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, // 18
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 19
  1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 20
  1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, // 21
  1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, // 22
  1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 23
  1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, // 24
  1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, // 25
  1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, // 26
  1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, // 27
  1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 28
  1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, // 29
  1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 30
  1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 31
  1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 32
  1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 33
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 34
  1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1  // 35
};

const byte NombreSequencesLED20 = 15; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED20 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 20 des séquences d'affichage des LED (Slide droite à gauche) (Tableau 20 inversé)
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 0
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 1
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 2
  1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, // 3
  1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 4
  1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, // 5
  1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, // 6
  1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, // 7
  1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, // 8
  1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, // 9
  1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, // 10
  0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, // 11
  0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, // 12
  0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, // 13
  1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0  // 14 => 9
};

const byte NombreSequencesLED21 = 18; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED21 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 21 des séquences d'affichage des LED (Slide droite à gauche) (Tableau 21 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 1
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 2
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 3
  1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 4
  1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 5
  0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, // 6
  0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 7
  0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, // 8
  0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, // 9
  1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 10
  1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, // 11
  0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, // 12
  0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 13
  0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, // 14
  0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, // 15
  1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 16
  1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0  // 17 => 12
};

const byte NombreSequencesLED22 = 15; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED22 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 22 des séquences d'affichage des LED (Slide droite à gauche) (Tableau 22 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 1
  0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 2
  1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 3
  1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 4
  0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, // 5
  1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, // 6
  0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, // 7
  1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, // 8
  1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, // 9
  0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, // 10
  1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, // 11
  0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, // 12
  1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, // 13
  1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1  // 14 => 10
};

const byte NombreSequencesLED23 = 23; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED23 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 23 des séquences d'affichage des LED (Tableau 23 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 1
  0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 2
  1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 3
  0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 4
  1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, // 5
  0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, // 6
  1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, // 7
  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, // 8
  1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, // 9
  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 10
  1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 11
  1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 12
  1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 13
  1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 14
  1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, // 15
  1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, // 16
  1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, // 17
  1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, // 18
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, // 19
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 20
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 21
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 22
};

const byte NombreSequencesLED24 = 16; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED24 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 24 des séquences d'affichage des LED (Tableau 24 inversé)
  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 0
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 1
  1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 2
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 3
  0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, // 4
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 5
  1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, // 6
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 7
  1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, // 8
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 9
  0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, // 10
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 11
  1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 12
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 13
  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 14
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 15
};

const byte NombreSequencesLED25 = 15; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED25 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 25 des séquences d'affichage des LED (Tableau 25 inversé)
  0, 1 ,1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 0
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, // 2
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 3
  0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 4
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 5
  1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 6
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 7
  0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, // 8
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 9
  0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, // 10
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 11
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 12
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 13
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // 14
};

const byte NombreSequencesLED26 = 15; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED26 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 26 des séquences d'affichage des LED (Tableau 26 inversé)
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 0
  1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 1
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 2
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 3
  1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, // 4
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 5
  0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 6
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 7
  0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 8
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 9
  1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 10
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 11
  1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, // 12
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 13
  0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0  // 14
};

const byte NombreSequencesLED27 = 24; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED27 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 27 des séquences d'affichage des LED (Tableau 27 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 1
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 2
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 3
  0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 4
  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 5
  0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, // 6
  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 7
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 8
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 9
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 10
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 11
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 12
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 13
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 14
  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 15
  0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, // 16
  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 17
  0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 18
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 19
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 20
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 21
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 22
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 23
};

const byte NombreSequencesLED28 = 12; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED28 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 28 des séquences d'affichage des LED (Tableau 28 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 1
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 2
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 3
  0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 4
  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 5
  1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, // 6
  1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, // 7
  1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, // 8
  1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, // 9
  1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, // 10
  1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0  // 11
};

const byte NombreSequencesLED29 = 12; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED29 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 29 des séquences d'affichage des LED (Tableau 29 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 0
  0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, // 1
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 2
  0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, // 3
  0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, // 4
  0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, // 5
  0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, // 6
  1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, // 7
  0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, // 8
  1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, // 9
  0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, // 10
  1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0  // 11
};

const byte NombreSequencesLED30 = 12; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED30 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 30 des séquences d'affichage des LED (Tableau 30 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 0
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 1
  0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 2
  0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 3
  0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 4
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 5
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 6
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 7
  1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 8
  1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 9
  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 10
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // 11
};

const byte NombreSequencesLED31 = 35; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED31 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 31 des séquences d'affichage des LED (Tableau 31 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 0
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 1
  0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 2
  0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 3
  0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 4
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 5
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 6
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 7
  1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 8
  1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 9
  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 10
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 11
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 12
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 13
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 14
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 15
  0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 16
  0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, // 17
  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 18
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 19
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 20
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 21
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 22
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 23
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 24
  1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 25
  1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 26
  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 27
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 28
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 29
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 30
  0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 31
  0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 32
  0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 33
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // 34
};

const byte NombreSequencesLED32 = 24; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED32 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 32 des séquences d'affichage des LED (Tableau 32 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 0
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 1
  0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 2
  0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 3
  0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 4
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 5
  0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, // 6
  0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, // 7
  0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, // 8
  0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, // 9
  0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, // 10
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 11
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 12
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 13
  1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 14
  1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 15
  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 16
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 17
  1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, // 18
  1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, // 19
  1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, // 20
  1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, // 21
  1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, // 22
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // 23
};

const byte NombreSequencesLED33 = 34; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED33 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 33 des séquences d'affichage des LED (Tableau 33 inversé)
  1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, // 0
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 1
  1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, // 2
  1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 3
  1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, // 4
  1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, // 5
  1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, // 6
  0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 7
  0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, // 8
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 9
  1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 10
  1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, // 11
  1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, // 12
  0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, // 13
  1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, // 14
  1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, // 15
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 16
  0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 17
  1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, // 18
  1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, // 19
  1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, // 20
  0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, // 21
  1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 22
  1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, // 23
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 24
  1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, // 25
  0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 26
  0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, // 27
  1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, // 28
  1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, // 29
  1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 30
  1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, // 31
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 32
  1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1  // 33
};

const byte NombreSequencesLED34 = 28; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED34 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 34 des séquences d'affichage des LED (Tableau 34 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 0
  0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, // 1
  0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, // 2
  0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, // 3
  0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 4
  0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, // 5
  1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, // 6
  1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, // 7
  0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, // 8
  0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, // 9
  0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 10
  0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 11
  0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, // 12
  0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, // 13
  1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, // 14
  1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, // 15
  0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, // 16
  0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 17
  0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 18
  0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, // 19
  0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, // 20
  0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, // 21
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 22
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 23
  0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, // 24
  0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, // 25
  0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, // 26
  0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0  // 27
};

const byte NombreSequencesLED35 = 49; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED35 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 35 des séquences d'affichage des LED (Tableau 35 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 0
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 0
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 1
  0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 2
  0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 3
  0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 4
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 5
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 6
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 7
  1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 8
  1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 9
  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 10
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 11
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 12
  1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 13
  1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, // 14
  1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, // 15
  0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, // 16
  1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, // 17
  1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, // 18
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 19
  0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 20
  1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, // 21
  1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, // 22
  1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, // 23
  0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, // 24
  1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 25
  1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, // 26
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 27
  1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, // 28
  0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 29
  0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, // 30
  1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, // 31
  1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, // 32
  1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 33
  1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, // 34
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 35
  1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, // 36
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 37
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 38
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 39
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 40
  0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 41
  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 42
  1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, // 43
  1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, // 44
  1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, // 45
  1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, // 46
  1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, // 47
  0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0  // 48
};

const byte NombreSequencesLED36 = 72; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED36 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 36 des séquences d'affichage des LED (Tableau 36 inversé)
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 1
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 2
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 3
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 4
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 5
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 6
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 7
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 8
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 9
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 10
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 11
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 12
  0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 13
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 14
  0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 15
  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 16
  0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 17
  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 18
  0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, // 19
  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 20
  0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, // 21
  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 22
  0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, // 23
  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 24
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 25
  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 26
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 27
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 28
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 29
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 30
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 31
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 32
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 33
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 34
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 35
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 36
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 37
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 38
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 39
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 40
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 41
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 42
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 43
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 44
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 45
  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 46
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 47
  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 48
  0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, // 49
  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 50
  0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, // 51
  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 52
  0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, // 53
  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 54
  0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 55
  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 56
  0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 57
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 58
  0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 59
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 60
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 61
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 62
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 63
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 65
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 66
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 67
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 68
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 69
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 70
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 71
};

const byte NombreSequencesLED37 = 23; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED37 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 37 des séquences d'affichage des LED (Tableau 37 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 0
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 1
  1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 2
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 3
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 4
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 5
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 6
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 7
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 8
  1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 9
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 10
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 11
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 12
  1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 13
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 14
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 15
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 16
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 17
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 18
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 19
  1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 20
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 21
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0  // 22
};

const byte NombreSequencesLED38 = 23; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED38 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 38 des séquences d'affichage des LED (Tableau 38 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 1
  1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 2
  1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 3
  1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 4
  1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, // 5
  1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, // 6
  1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, // 7
  1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, // 8
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 9
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 10
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 11
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 12
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 13
  1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, // 14
  1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, // 15
  1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, // 16
  1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, // 17
  1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 18
  1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 19
  1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 20
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 21
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 22
};

const byte NombreSequencesLED39 = 66; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED39 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 39 des séquences d'affichage des LED (Tableau 39 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 1
  1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 2
  1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 3
  1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 4
  1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, // 5
  1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, // 6
  1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, // 7
  1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, // 8
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 9
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 10
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 11
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 12
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 13
  1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, // 14
  1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, // 15
  1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, // 16
  1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, // 17
  1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 18
  1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 19
  1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 20
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 21
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 22
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 23
  1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 24
  1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 25
  1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 26
  1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, // 27
  1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 28
  1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 29
  1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 30
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 31
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 32
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 33
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 34
  1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 35
  1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 36
  1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 37
  1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, // 38
  1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, // 39
  1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, // 40
  1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, // 41
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 42
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 43
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 44
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 45
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 46
  1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, // 47
  1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, // 48
  1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, // 49
  1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, // 50
  1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, // 51
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 52
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 53
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 54
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 55
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 56
  1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, // 57
  1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, // 58
  1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, // 59
  1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, // 60
  1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 61
  1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 62
  1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 63
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 65
};

const byte NombreSequencesLED40 = 53; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED40 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 40 des séquences d'affichage des LED (Tableau 40 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 0
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 1
  1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 2
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 3
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 4
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 5
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 6
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 7
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 8
  1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 9
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 10
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 11
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 12
  1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 13
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 14
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 15
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 16
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 17
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 18
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 19
  1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 20
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 21
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 22
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 23
  1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 24
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 25
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 26
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 27
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 28
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 29
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 30
  1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 31
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 32
  1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 33
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, // 34
  1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, // 35
  1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, // 36
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 37
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 38
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 39
  1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, // 40
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 41
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 42
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 43
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 44
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 45
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 46
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 47
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 48
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 49
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 50
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 51
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1  // 52
};

const byte NombreSequencesLED41 = 23; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED41 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 41 des séquences d'affichage des LED (Tableau 41 inversé)
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 0
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 1
  1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 2
  1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 3
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 4
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 5
  1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, // 6
  1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, // 7
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 8
  1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, // 9
  1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, // 10
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 11
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 12
  1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 13
  1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 14
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 15
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 16
  1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, // 17
  1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, // 18
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 19
  1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, // 20
  1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, // 21
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0  // 22
};

const byte NombreSequencesLED42 = 53; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED42 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 42 des séquences d'affichage des LED (Tableau 42 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 0
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 1
  0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, // 2
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 3
  0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, // 4
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 5
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 6
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 7
  0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, // 8
  1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 9
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 10
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 11
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 12
  0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, // 13
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 14
  0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, // 15
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 16
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 17
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 18
  0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, // 19
  1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, // 20
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 21
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 22
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 23
  0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, // 24
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 25
  0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, // 26
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 27
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 28
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 29
  0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, // 30
  1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 31
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 32
  1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 33
  0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, // 34
  1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, // 35
  0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, // 36
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 37
  0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, // 38
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 39
  0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, // 40
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 41
  0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, // 42
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 43
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 44
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 45
  0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, // 46
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 47
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 48
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 49
  0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, // 50
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 51
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0  // 52
};

const byte NombreSequencesLED43 = 53; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED43 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 43 des séquences d'affichage des LED (Tableau 43 inversé)
  0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, // 0
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 1
  0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, // 2
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 3
  0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, // 4
  1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, // 5
  0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, // 6
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 7
  0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, // 8
  1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 9
  0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, // 10
  0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, // 11
  1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, // 12
  0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, // 13
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 14
  0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, // 15
  1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, // 16
  0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, // 17
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 18
  0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, // 19
  1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, // 20
  0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, // 21
  0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, // 22
  1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, // 23
  0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, // 24
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 25
  0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, // 26
  1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, // 27
  0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, // 28
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 29
  0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, // 30
  1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 31
  0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, // 32
  1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 33
  0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, // 34
  1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, // 35
  0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, // 36
  1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, // 37
  0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, // 38
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 39
  0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, // 40
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 41
  0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, // 42
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 43
  0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, // 44
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 45
  0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, // 46
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 47
  0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, // 48
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 49
  0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, // 50
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 51
  0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0  // 52
};

const byte NombreSequencesLED44 = 4; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED44 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 44 des séquences d'affichage des LED (Tableau 44 inversé)
  0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, // 0
  1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, // 1
  1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, // 2
  1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0  // 3
};

const byte NombreSequencesLED45 = 46; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED45 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 45 des séquences d'affichage des LED (Tableau 45 inversé)
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 1
  0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 2
  1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 3
  0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 4
  1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, // 5
  0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, // 6
  1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, // 7
  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, // 8
  1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, // 9
  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 10
  1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 11
  1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 12
  1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 13
  1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 14
  1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, // 15
  1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, // 16
  1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, // 17
  1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, // 18
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, // 19
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 20
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 21
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 22
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 23
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 24
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, // 25
  1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, // 26
  1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, // 27
  1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, // 28
  1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, // 29
  1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 30
  1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 31
  1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 32
  1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 33
  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 34
  1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, // 35
  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, // 36
  1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, // 37
  0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, // 38
  1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, // 39
  0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, // 40
  1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 41
  0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 42
  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 43
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 44
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 45
};

const byte NombreSequencesLED46 = 11; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED46 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 46 des séquences d'affichage des LED (Tableau 46 inversé)
  1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 0
  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 1
  1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, // 2
  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, // 3
  1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, // 4
  0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, // 5
  1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 6
  1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 7
  1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 8
  1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 9
  1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0  // 10
};

const byte NombreSequencesLED47 = 11; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED47 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 47 des séquences d'affichage des LED (Tableau 47 inversé)
  1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 0
  0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, // 1
  1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, // 2
  0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 3
  1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, // 4
  0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, // 5
  1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 6
  0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 7
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 8
  0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, // 9
  1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1  // 10
};

const byte NombreSequencesLED48 = 10; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED48 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 48 des séquences d'affichage des LED (Tableau 48 inversé)
  0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 0
  1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, // 1
  1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, // 2
  1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 3
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 4
  1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, // 5
  1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 6
  1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 7
  1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 8
  0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0  // 9
};

const byte NombreSequencesLED49 = 8; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED49 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 49 des séquences d'affichage des LED (Tableau 49 inversé)
  1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 0
  0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 1
  0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, // 2
  0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, // 3
  0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, // 4
  0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 5
  1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 6
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // 7
};

const byte NombreSequencesLED50 = 34; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED50 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 50 des séquences d'affichage des LED (Tableau 50 inversé)
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 0
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 1
  1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 2
  1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, // 3
  1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, // 4
  0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, // 5
  0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, // 6
  1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, // 7
  1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, // 8
  1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 9
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 10
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 11
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, // 12
  1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, // 13
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 14
  1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, // 15
  1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, // 16
  0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, // 17
  1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, // 18
  1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, // 19
  1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 20
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 21
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 22
  1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 23
  1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 24
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 25
  1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, // 26
  1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, // 27
  0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, // 28
  1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, // 29
  1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, // 30
  1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 31
  1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 32
  1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0  // 33
};

const byte NombreSequencesLED51 = 34; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED51 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 51 des séquences d'affichage des LED (Tableau 51 inversé)
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 0
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 1
  1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 2
  1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 3
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 4
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 5
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 6
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 7
  1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 8
  1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 9
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 10
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 11
  1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, // 12
  1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, // 13
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 14
  1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, // 15
  1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, // 16
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 17
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 18
  1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 19
  1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 20
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 21
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 22
  1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, // 23
  1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, // 24
  1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 25
  1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, // 26
  1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, // 27
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 28
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 29
  1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 30
  1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 31
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 32
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0  // 33
};

const byte NombreSequencesLED52 = 34; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED52 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 52 des séquences d'affichage des LED (Tableau 52 inversé)
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 0
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 1
  1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 2
  1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 3
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 4
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 5
  0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, // 6
  1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, // 7
  1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 8
  1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, // 9
  1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, // 10
  0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, // 11
  1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, // 12
  1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, // 13
  1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, // 14
  0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, // 15
  1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, // 16
  0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, // 17
  1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, // 18
  1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, // 19
  1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, // 20
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 21
  0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, // 22
  1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, // 23
  1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, // 24
  0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, // 25
  1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, // 26
  1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, // 27
  0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, // 28
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 29
  1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, // 30
  1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, // 31
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 32
  0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0  // 33
};

U8X8_SH1106_128X64_NONAME_HW_I2C u8x8(/* reset=*/ U8X8_PIN_NONE);                                                               // Crée l'objet "u8x8"

//**************************************************************************************************************************************************************************
//**************************************************************************************************************************************************************************
void setup()
{
  //Serial.begin(9600);                                                                                                           // Démarre la voie série pour la communication avec la console
  
  pinMode(BrocheBuzzer, OUTPUT);                                                                                                // Configure les broches en sorties
  for (int BrocheLED = 2; BrocheLED < 14; BrocheLED++)
  {
    pinMode(BrocheLED, OUTPUT);
  }
  
  pinMode(BrocheBPModePlus, INPUT_PULLUP);                                                                                      // Configure les broches en entrées
  pinMode(BrocheBPModeMoins, INPUT_PULLUP);
  pinMode(BrocheBPModeAuto, INPUT_PULLUP);
  
  u8x8.begin();                                                                                                                 // Initialise la librairie de la gestion de l'afficheur OLED 1.3" (128x64) SH1106
  u8x8.setFont(u8x8_font_amstrad_cpc_extended_f);                                                                               // Définit la police de caractères
  u8x8.drawString(0, 0, "MODE D'AFFICHAGE");                                                                                    // Positionne et Affiche le texte
  u8x8.drawString(0, 1, "----------------");                                                                                    // Positionne et Affiche le texte
  u8x8.drawString(0, 6, "----------------");                                                                                    // Positionne et Affiche le texte
  u8x8.drawString(0, 7, "- MODE: MANUEL -");                                                                                    // Positionne et Affiche le texte
  
  FonctionAffichageOLED();                                                                                                      // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
  
  attachPinChangeInterrupt(digitalPinToPinChangeInterrupt(BrocheBPModePlus), InterruptionBPModePlus, FALLING);                  // Attache l'interruption de changement de broche sur la broche "BrocheBPModePlus" et Active la fonction d'événement "InterruptionBPModePlus" sur front descendant
  attachPinChangeInterrupt(digitalPinToPinChangeInterrupt(BrocheBPModeMoins), InterruptionBPModeMoins, FALLING);                // Attache l'interruption de changement de broche sur la broche "BrocheBPModeMoins" et Active la fonction d'événement "InterruptionBPModeMoins" sur front descendant
  attachPinChangeInterrupt(digitalPinToPinChangeInterrupt(BrocheBPModeAuto), InterruptionBPModeAuto, FALLING);                  // Attache l'interruption de changement de broche sur la broche "BrocheBPModeAuto" et Active la fonction d'événement "InterruptionBPModeAuto" sur front descendant
  
  delay(1000);                                                                                                                  // Temporise 1 seconde
  
  Buzzer(50, 0, 1);                                                                                                             // Active le buzzer 50ms

//**************************************************************************************************************************************************************************
//**************************************************************************************************************************************************************************
}

void loop()
{
//**************************************************************************************************************************************************************************
  if (ModeAuto) // ************************************************************************************************************ // Si le mode automatique est activé
  {
    if (!AffichageModeAuto) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si l'indicateur d'affichage du mode auto sur l'écran OLED est désactivé
    {
      u8x8.drawString(0, 7, "-- MODE: AUTO --");                                                                                // Positionne et Affiche le texte
      AffichageModeAuto = true;                                                                                                 // Active l'indicateur d'affichage du mode auto sur l'écran OLED
      AffichageModeManuel = false;                                                                                              // Désactive l'indicateur d'affichage du mode manuel sur l'écran OLED
      compteurAffichageModeCourant = 0;                                                                                         // Réinitialise le compteur d'affichages du mode courant en mode automatique
    }
    
    if (compteurAffichageModeCourant > NombreAffichageModeCourant * MultipleNombreAffichageModeCourant) // ++++++++++++++++++++ // Si le compteur d'affichages du mode courant en mode automatique est supérieur à "3"
    {
      FonctionReinitialisation();                                                                                               // Appelle la fonction de réinitialisation
      
      compteurAffichageModeCourant = 0;                                                                                         // Réinitialise le compteur d'affichages du mode courant en mode automatique
      
      ModeCourant++;                                                                                                            // Incrémente le mode courant
      if (ModeCourant > NombreModesMax) {ModeCourant = 0;} // ----------------------------------------------------------------- // Borne le mode courant
    }
    else // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le compteur d'affichages du mode courant en mode automatique est inférieur ou égal à à "2"
    {
      compteurAffichageModeCourant++;                                                                                           // Incrémente le compteur d'affichages du mode courant en mode automatique
    }
  }
  else if (!ModeAuto) // ****************************************************************************************************** // Si le mode automatique est désactivé
  {
    if (!AffichageModeManuel) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si l'indicateur d'affichage du mode manuel sur l'écran OLED est désactivé
    {
      u8x8.drawString(0, 7, "- MODE: MANUEL -");                                                                                // Positionne et Affiche le texte
      AffichageModeAuto = false;                                                                                                // Désactive l'indicateur d'affichage du mode auto sur l'écran OLED
      AffichageModeManuel = true;                                                                                               // Active l'indicateur d'affichage du mode manuel sur l'écran OLED
    }
  }

//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 0 *****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  if (ModeCourant == 0) // **************************************************************************************************** // Si le mode courant "0" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      LigneCourante_Combinaisons_Equations = 0;                                                                                 // Initialise la ligne courante du tableau des combinaisons des équations pour les manipulations du tableau buffer
      DureeHIGH_LOW = 60ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {  
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "12 - PointeurTableauBroches12LED - 1"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations1" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations1 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      FonctionManipulationsTableau_buffer(buffer_Combinaisons_Equations[0]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations1 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction1ManipulationsTableau_buffer(buffer_Combinaisons_Equations[0]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations1 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction2ManipulationsTableau_buffer(buffer_Combinaisons_Equations[0]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations6" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations6 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      FonctionManipulationsTableau_buffer(buffer_Combinaisons_Equations[1]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations6 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction1ManipulationsTableau_buffer(buffer_Combinaisons_Equations[1]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations6 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction2ManipulationsTableau_buffer(buffer_Combinaisons_Equations[1]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations6" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations1 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      FonctionManipulationsTableau_buffer(buffer_Combinaisons_Equations[2]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations1 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction1ManipulationsTableau_buffer(buffer_Combinaisons_Equations[2]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations1 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction2ManipulationsTableau_buffer(buffer_Combinaisons_Equations[2]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations6" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations6 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      FonctionManipulationsTableau_buffer(buffer_Combinaisons_Equations[1]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations6 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction1ManipulationsTableau_buffer(buffer_Combinaisons_Equations[3]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations6 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction2ManipulationsTableau_buffer(buffer_Combinaisons_Equations[3]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations1" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations1 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      FonctionManipulationsTableau_buffer(buffer_Combinaisons_Equations[0]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations1 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction1ManipulationsTableau_buffer(buffer_Combinaisons_Equations[0]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations1 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction2ManipulationsTableau_buffer(buffer_Combinaisons_Equations[0]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations6" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations6 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      FonctionManipulationsTableau_buffer(buffer_Combinaisons_Equations[1]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations6 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction1ManipulationsTableau_buffer(buffer_Combinaisons_Equations[1]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations6 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction2ManipulationsTableau_buffer(buffer_Combinaisons_Equations[1]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations6" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations1 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      FonctionManipulationsTableau_buffer(buffer_Combinaisons_Equations[2]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations1 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction1ManipulationsTableau_buffer(buffer_Combinaisons_Equations[2]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations1 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction2ManipulationsTableau_buffer(buffer_Combinaisons_Equations[2]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations6" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations6 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      FonctionManipulationsTableau_buffer(buffer_Combinaisons_Equations[1]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations6 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction1ManipulationsTableau_buffer(buffer_Combinaisons_Equations[3]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations6 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction2ManipulationsTableau_buffer(buffer_Combinaisons_Equations[3]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    LigneCourante_Combinaisons_Equations++;                                                                                     // Incrémente la ligne courante du tableau des combinaisons des équations pour les manipulations du tableau buffer
    // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Borne la ligne courante du tableau des combinaisons des équations pour les manipulations du tableau buffer
    if (LigneCourante_Combinaisons_Equations > NombreLignes_Combinaisons_Equations -1) {LigneCourante_Combinaisons_Equations = 0; ColonneCourante_Combinaisons_Equations = NombreColonnes_Combinaisons_Equations - 1;}
  }
//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 1 *****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  else if (ModeCourant == 1) // *********************************************************************************************** // Si le mode courant "1" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      LigneCourante_Combinaisons_Equations = 0;                                                                                 // Initialise la ligne courante du tableau des combinaisons des équations pour les manipulations du tableau buffer
      DureeHIGH_LOW = 60ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {  
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "12 - PointeurTableauBroches12LED - 1"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations1" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations1 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction1ManipulationsTableau_buffer(buffer_Combinaisons_Equations[0]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
     
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations2" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations2 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      FonctionManipulationsTableau_buffer(buffer_Combinaisons_Equations[0]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
     
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations3" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations3 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction2ManipulationsTableau_buffer(buffer_Combinaisons_Equations[0]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations4" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations4 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction1ManipulationsTableau_buffer(buffer_Combinaisons_Equations[0]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
     
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations5" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations5 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      FonctionManipulationsTableau_buffer(buffer_Combinaisons_Equations[0]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
     
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations6" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations6 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction2ManipulationsTableau_buffer(buffer_Combinaisons_Equations[0]);
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction1ManipulationsTableau_buffer(buffer_Combinaisons_Equations[1]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
     
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations1" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations1 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      FonctionManipulationsTableau_buffer(buffer_Combinaisons_Equations[1]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
     
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations2" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations2 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction2ManipulationsTableau_buffer(buffer_Combinaisons_Equations[1]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations3" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations3 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction1ManipulationsTableau_buffer(buffer_Combinaisons_Equations[1]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations4" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations4 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      FonctionManipulationsTableau_buffer(buffer_Combinaisons_Equations[1]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations5" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations5 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction2ManipulationsTableau_buffer(buffer_Combinaisons_Equations[1]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations1" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations1 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction1ManipulationsTableau_buffer(buffer_Combinaisons_Equations[2]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "12 - PointeurTableauBroches12LED - 1"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }

                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations2" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations2 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      FonctionManipulationsTableau_buffer(buffer_Combinaisons_Equations[2]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "12 - PointeurTableauBroches12LED - 1"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations3" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations3 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction2ManipulationsTableau_buffer(buffer_Combinaisons_Equations[2]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "12 - PointeurTableauBroches12LED - 1"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations4" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations4 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction1ManipulationsTableau_buffer(buffer_Combinaisons_Equations[2]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "12 - PointeurTableauBroches12LED - 1"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations5" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations5 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      FonctionManipulationsTableau_buffer(buffer_Combinaisons_Equations[2]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "12 - PointeurTableauBroches12LED - 1"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
     
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations6" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations6 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction2ManipulationsTableau_buffer(buffer_Combinaisons_Equations[2]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "12 - PointeurTableauBroches12LED - 1"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction1ManipulationsTableau_buffer(buffer_Combinaisons_Equations[3]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "12 - PointeurTableauBroches12LED - 1"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
     
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations1" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations1 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      FonctionManipulationsTableau_buffer(buffer_Combinaisons_Equations[3]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "12 - PointeurTableauBroches12LED - 1"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations2" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations2 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction2ManipulationsTableau_buffer(buffer_Combinaisons_Equations[3]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
    
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations3" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations3 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction1ManipulationsTableau_buffer(buffer_Combinaisons_Equations[3]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
    
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations4" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations4 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      FonctionManipulationsTableau_buffer(buffer_Combinaisons_Equations[3]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED20; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED20 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
                                                                                                                                // Extrait la ligne courante du tableau "Combinaisons_Equations5" et mémorise dans le tableau "buffer_Combinaisons_Equations"
      memcpy_P(buffer_Combinaisons_Equations, Combinaisons_Equations5 + (NombreColonnes_Combinaisons_Equations * LigneCourante_Combinaisons_Equations), NombreColonnes_Combinaisons_Equations * sizeof(int));
                                                                                                                                // Appelle la fonction de manipulations du tableau buffer (Argument : Equations)
      Fonction2ManipulationsTableau_buffer(buffer_Combinaisons_Equations[3]);
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer1_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    LigneCourante_Combinaisons_Equations++;                                                                                     // Incrémente la ligne courante du tableau des combinaisons des équations pour les manipulations du tableau buffer
    // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Borne la ligne courante du tableau des combinaisons des équations pour les manipulations du tableau buffer
    if (LigneCourante_Combinaisons_Equations > NombreLignes_Combinaisons_Equations -1) {LigneCourante_Combinaisons_Equations = 0; ColonneCourante_Combinaisons_Equations = NombreColonnes_Combinaisons_Equations - 1;}
  }

//**************************************************************************************************************************************************************************
//**************************************************************************************************************************************************************************
}

//**************************************************************************************************************************************************************************
//*** Fonction d'interruption de changement de broche du bouton poussoir "BPModePlus" **************************************************************************************
//**************************************************************************************************************************************************************************
void InterruptionBPModePlus (void)
{
  static unsigned long DateDernierChangement = 0;                                                                               // Déclare et Initialise la date du dernier changement du bouton poussoir "BPModePlus"
  
  unsigned long DateCourante = millis();                                                                                        // Déclare et Mémorise la date courante
  
  if ((DateCourante - DateDernierChangement) > DureeAntiRebond) // ************************************************************ // Si la durée de l'anti-rebonds est écoulée
  {
    cli();                                                                                                                      // Désactive les interruptions
    
    if (ModeAuto) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode automatique est activé
    {
      ModeAuto = false;                                                                                                         // Désactive le mode automatique
      compteurAffichageModeCourant = 0;                                                                                         // Réinitialise le compteur d'affichages du mode courant en mode automatique
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Réinitialise le multiple du nombre d'affichages du mode courant en mode automatique
    }
    
    FonctionReinitialisation();                                                                                                 // Appelle la fonction de réinitialisation
    
    ModeCourant++;                                                                                                              // Incrémente le mode courant
    if (ModeCourant > NombreModesMax) {ModeCourant = 0;} // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Borne le mode courant
    //Serial.println("Int+"); // Débug
    //Serial.println(ModeCourant); // Débug
    
    SortieModeCourant = true;                                                                                                   // Active l'indicateur de sortie du mode courant
    
    DateDernierChangement = DateCourante;                                                                                       // Mémorise la dernière date courante
    
    sei();                                                                                                                      // Active les interruptions
  }
}

//**************************************************************************************************************************************************************************
//*** Fonction d'interruption de changement de broche du bouton poussoir "BPModeMoins" *************************************************************************************
//**************************************************************************************************************************************************************************
void InterruptionBPModeMoins (void)
{
  static unsigned long DateDernierChangement = 0;                                                                               // Déclare et Initialise la date du dernier changement du bouton poussoir "BPModeMoins"
  
  unsigned long DateCourante = millis();                                                                                        // Déclare et Mémorise la date courante
  
  if ((DateCourante - DateDernierChangement) > DureeAntiRebond) // ************************************************************ // Si la durée de l'anti-rebonds est écoulée
  {
    cli();                                                                                                                      // Désactive les interruptions
    
    if (ModeAuto) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode automatique est activé
    {
      ModeAuto = false;                                                                                                         // Désactive le mode automatique
      compteurAffichageModeCourant = 0;                                                                                         // Réinitialise le compteur d'affichages du mode courant en mode automatique
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Réinitialise le multiple du nombre d'affichages du mode courant en mode automatique
    }
    
    FonctionReinitialisation();                                                                                                 // Appelle la fonction de réinitialisation
    
    ModeCourant--;                                                                                                              // Décrémente le mode courant
    if (ModeCourant < 0) {ModeCourant = NombreModesMax;} // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Borne le mode courant
    //Serial.println("Int-"); // Débug
    //Serial.println(ModeCourant); // Débug
    
    SortieModeCourant = true;                                                                                                   // Active l'indicateur de sortie du mode courant
    
    DateDernierChangement = DateCourante;                                                                                       // Mémorise la dernière date courante
    
    sei();                                                                                                                      // Active les interruptions
  }
}

//**************************************************************************************************************************************************************************
//*** Fonction d'interruption de changement de broche du bouton poussoir "BPModeAuto" *************************************************************************************
//**************************************************************************************************************************************************************************
void InterruptionBPModeAuto ()
{
  static unsigned long DateDernierChangement = 0;                                                                               // Déclare et Initialise la date du dernier changement du bouton poussoir "BPModeMoins"
  
  unsigned long DateCourante = millis();                                                                                        // Déclare et Mémorise la date courante
  
  if ((DateCourante - DateDernierChangement) > DureeAntiRebond) // ************************************************************ // Si la durée de l'anti-rebonds est écoulée
  {
    cli();                                                                                                                      // Désactive les interruptions
    
    FonctionReinitialisation();                                                                                                 // Appelle la fonction de réinitialisation
    
    Buzzer(100, 0, 1);                                                                                                          // Active le buzzer 100ms
    
    ModeAuto = !ModeAuto;                                                                                                       // Active ou désactive le mode automatique
    
    ModeCourant = 0;                                                                                                            // Initialise le mode courant
    DernierModeCourant = -1;                                                                                                    // Initialise le dernier mode courant
    MultipleNombreAffichageModeCourant = 1;                                                                                     // Initialise le multiple du nombre d'affichages du mode courant en mode automatique
    
    SortieModeCourant = true;                                                                                                   // Active l'indicateur de sortie du mode courant
    
    DateDernierChangement = DateCourante;                                                                                       // Mémorise la dernière date courante
    
    sei();                                                                                                                      // Active les interruptions
  }
}

//**************************************************************************************************************************************************************************
//*** Fonction de réinitialisation *****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
void FonctionReinitialisation ()
{
  cli();                                                                                                                        // Désactive les interruptions
  
  DDRD |= 0b11111100;                                                                                                           // Configure les broches PD2, PD3, PD4, PD5, PD7 et PD6 en sorties
  DDRB |= 0b00111111;                                                                                                           // Configure les broches PB0, PB1, PB2, PB3, PB4 et PB5 en sorties
  
  PORTD &= 0b00000011;                                                                                                          // Eteint toutes les LED du PORTD
  PORTB &= 0b11000000;                                                                                                          // Eteint toutes les LED du PORTB
  
  compteurAffichageModeCourant = 0;                                                                                             // Réinitialise le compteur d'affichages du mode courant en mode automatique
  
  sei();                                                                                                                        // Active les interruptions
}

//**************************************************************************************************************************************************************************
//*** Fonction de gestion de l'affichage sur l'écran OLED 1.3" *************************************************************************************************************
//**************************************************************************************************************************************************************************
void FonctionAffichageOLED ()
{
  u8x8.draw2x2String(6, 3, u8x8_u16toa(ModeCourant, 2));                                                                        // Positionne et Affiche le mode courant
}

//**************************************************************************************************************************************************************************
//*** Fonction Gestion Buzzer **********************************************************************************************************************************************
//**************************************************************************************************************************************************************************
void Buzzer (int TempsH, int TempsL, int nb)                                                                                    // TempsH => délai buzzer ON, TempsL => délai buzzer OFF, nb => nombre de bips
{
  for (int x = 1; x <= nb; x++) // ******************************************************************************************** // Boucle le nombre de fois voulu passé par l'argument "int nb"
  {
    digitalWrite(BrocheBuzzer, HIGH);                                                                                           // Active le buzzer
    delay(TempsH);                                                                                                              // Temporisation à l'état haut du buzzer pendant la durée passée par l'argument "int TempsH"
    digitalWrite(BrocheBuzzer, LOW);                                                                                            // Désactive le buzzer
    delay(TempsL);                                                                                                              // Temporisation à l'état bas du buzzer pendant la durée passée par l'argument "int TempsL"
  }
}

//**************************************************************************************************************************************************************************
//*** Fonction de temporisation non bloquante ******************************************************************************************************************************
//**************************************************************************************************************************************************************************
void Fonction_Temporisation (unsigned long Delai_Attente)
{
  unsigned long TimeOut = millis();                                                                                             // Démarre la temporisation
  
  while (millis() - TimeOut <= Delai_Attente) // ****************************************************************************** // Tant que la temporisation n'est pas écoulée
  {
    if (SortieModeCourant) // ------------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
    {
      return;                                                                                                                   // Retour début loop()
    }
  }
}

//**************************************************************************************************************************************************************************
//*** Fonction de gestion des manipulations du tableau buffer **************************************************************************************************************
//**************************************************************************************************************************************************************************
void FonctionManipulationsTableau_buffer (int Equations)
{
  if (Equations == 0) // ****************************************************************************************************** // Si l'argument équations est égal à "0"
  {
    for (pt_buffer_TableauSequencesLED = 0; pt_buffer_TableauSequencesLED < NombreLED; pt_buffer_TableauSequencesLED++) // ++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (pt_buffer_TableauSequencesLED < 6) // ------------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est inférieur à 6
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "pt_buffer_TableauSequencesLED + 6" du tableau buffer 1
        buffer1_TableauSequencesLED[pt_buffer_TableauSequencesLED + 6] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
      else // ----------------------------------------------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est supérieur ou égal à 6
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "6 - pt_buffer_TableauSequencesLED + 5" du tableau buffer 1
        buffer1_TableauSequencesLED[6 - pt_buffer_TableauSequencesLED + 5] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
    }
  }
  else if (Equations == 1) // ************************************************************************************************* // Si l'argument équations est égal à "1"
  {
    for (pt_buffer_TableauSequencesLED = 0; pt_buffer_TableauSequencesLED < NombreLED; pt_buffer_TableauSequencesLED++) // ++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (pt_buffer_TableauSequencesLED < 6) // ------------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est inférieur à 6
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "pt_buffer_TableauSequencesLED + 6" du tableau buffer 1
        buffer1_TableauSequencesLED[pt_buffer_TableauSequencesLED + 6] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
      else // ----------------------------------------------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est supérieur ou égal à 6
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "6 + pt_buffer_TableauSequencesLED - 12" du tableau buffer 1
        buffer1_TableauSequencesLED[6 + pt_buffer_TableauSequencesLED - 12] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
    }
  }
  else if (Equations == 2) // ************************************************************************************************* // Si l'argument équations est égal à "2"
  {
    for (pt_buffer_TableauSequencesLED = 0; pt_buffer_TableauSequencesLED < NombreLED; pt_buffer_TableauSequencesLED++) // ++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (pt_buffer_TableauSequencesLED < 6) // ------------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est inférieur à 6
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "6 - pt_buffer_TableauSequencesLED + 5" du tableau buffer 1
        buffer1_TableauSequencesLED[6 - pt_buffer_TableauSequencesLED + 5] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
      else // ----------------------------------------------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est supérieur ou égal à 6
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "6 - pt_buffer_TableauSequencesLED + 5" du tableau buffer 1
        buffer1_TableauSequencesLED[6 - pt_buffer_TableauSequencesLED + 5] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
    }
  }
  else if (Equations == 3) // ************************************************************************************************* // Si l'argument équations est égal à "3"
  {
    for (pt_buffer_TableauSequencesLED = 0; pt_buffer_TableauSequencesLED < NombreLED; pt_buffer_TableauSequencesLED++) // ++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (pt_buffer_TableauSequencesLED < 6) // ------------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est inférieur à 6
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "6 - pt_buffer_TableauSequencesLED + 5" du tableau buffer 1
        buffer1_TableauSequencesLED[6 - pt_buffer_TableauSequencesLED + 5] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
      else // ----------------------------------------------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est supérieur ou égal à 6
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "6 + pt_buffer_TableauSequencesLED - 12" du tableau buffer 1
        buffer1_TableauSequencesLED[6 + pt_buffer_TableauSequencesLED - 12] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
    }
  }
}

//**************************************************************************************************************************************************************************
//*** Fonction 1 de gestion des manipulations du tableau buffer ************************************************************************************************************
//**************************************************************************************************************************************************************************
void Fonction1ManipulationsTableau_buffer (int Equations)
{
  if (Equations == 0) // ****************************************************************************************************** // Si l'argument équations est égal à "0"
  {
    for (pt_buffer_TableauSequencesLED = 0; pt_buffer_TableauSequencesLED < NombreLED; pt_buffer_TableauSequencesLED++) // ++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (pt_buffer_TableauSequencesLED < 6) // ------------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est inférieur à 6
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "6 + pt_buffer_TableauSequencesLED - 3" du tableau buffer 1
        buffer1_TableauSequencesLED[6 + pt_buffer_TableauSequencesLED - 3] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
      else if (pt_buffer_TableauSequencesLED < 9) // -------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est inférieur à 9
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "pt_buffer_TableauSequencesLED + 3" du tableau buffer 1
        buffer1_TableauSequencesLED[pt_buffer_TableauSequencesLED + 3] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
      else if (pt_buffer_TableauSequencesLED > 8) // -------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est supérieur à 8
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "3 - pt_buffer_TableauSequencesLED + 8" du tableau buffer 1
        buffer1_TableauSequencesLED[3 - pt_buffer_TableauSequencesLED + 8] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
    }
  }
  else if (Equations == 1) // ************************************************************************************************* // Si l'argument équations est égal à "1"
  {
    for (pt_buffer_TableauSequencesLED = 0; pt_buffer_TableauSequencesLED < NombreLED; pt_buffer_TableauSequencesLED++) // ++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (pt_buffer_TableauSequencesLED < 6) // ------------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est inférieur à 6
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "6 + pt_buffer_TableauSequencesLED - 3" du tableau buffer 1
        buffer1_TableauSequencesLED[6 + pt_buffer_TableauSequencesLED - 3] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
      else if (pt_buffer_TableauSequencesLED < 9) // -------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est inférieur à 9
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "3 + pt_buffer_TableauSequencesLED - 9" du tableau buffer 1
        buffer1_TableauSequencesLED[3 + pt_buffer_TableauSequencesLED - 9] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
      else if (pt_buffer_TableauSequencesLED > 8) // -------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est supérieur à 8
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "pt_buffer_TableauSequencesLED" du tableau buffer 1
        buffer1_TableauSequencesLED[pt_buffer_TableauSequencesLED] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
    }
  }
  else if (Equations == 2) // ************************************************************************************************* // Si l'argument équations est égal à "2"
  {
    for (pt_buffer_TableauSequencesLED = 0; pt_buffer_TableauSequencesLED < NombreLED; pt_buffer_TableauSequencesLED++) // ++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (pt_buffer_TableauSequencesLED < 6) // ------------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est inférieur à 6
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "6 + pt_buffer_TableauSequencesLED - 3" du tableau buffer 1
        buffer1_TableauSequencesLED[6 + pt_buffer_TableauSequencesLED - 3] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
      else if (pt_buffer_TableauSequencesLED < 9) // -------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est inférieur à 9
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "3 - pt_buffer_TableauSequencesLED + 5" du tableau buffer 1
        buffer1_TableauSequencesLED[3 - pt_buffer_TableauSequencesLED + 5] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
      else if (pt_buffer_TableauSequencesLED > 8) // -------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est supérieur à 8
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "3 - pt_buffer_TableauSequencesLED + 17" du tableau buffer 1
        buffer1_TableauSequencesLED[3 - pt_buffer_TableauSequencesLED + 17] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
    }
  }
  else if (Equations == 3) // ************************************************************************************************* // Si l'argument équations est égal à "3"
  {
    for (pt_buffer_TableauSequencesLED = 0; pt_buffer_TableauSequencesLED < NombreLED; pt_buffer_TableauSequencesLED++) // ++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (pt_buffer_TableauSequencesLED < 6) // ------------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est inférieur à 6
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "6 + pt_buffer_TableauSequencesLED - 3" du tableau buffer 1
        buffer1_TableauSequencesLED[6 + pt_buffer_TableauSequencesLED - 3] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
      else if (pt_buffer_TableauSequencesLED < 9) // -------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est inférieur à 9
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "3 - pt_buffer_TableauSequencesLED + 14" du tableau buffer 1
        buffer1_TableauSequencesLED[3 - pt_buffer_TableauSequencesLED + 14] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
      else if (pt_buffer_TableauSequencesLED > 8) // -------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est supérieur à 8
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "3 + pt_buffer_TableauSequencesLED - 12" du tableau buffer 1
        buffer1_TableauSequencesLED[3 + pt_buffer_TableauSequencesLED - 12] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
    }
  }
}

//**************************************************************************************************************************************************************************
//*** Fonction 2 de gestion des manipulations du tableau buffer ************************************************************************************************************
//**************************************************************************************************************************************************************************
void Fonction2ManipulationsTableau_buffer (int Equations)
{
  if (Equations == 0) // ****************************************************************************************************** // Si l'argument équations est égal à "0"
  {
    for (pt_buffer_TableauSequencesLED = 0; pt_buffer_TableauSequencesLED < NombreLED; pt_buffer_TableauSequencesLED++) // ++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (pt_buffer_TableauSequencesLED < 3) // ------------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est inférieur à 3
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "3 + pt_buffer_TableauSequencesLED + 6" du tableau buffer 1
        buffer1_TableauSequencesLED[3 + pt_buffer_TableauSequencesLED + 6] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
      else if (pt_buffer_TableauSequencesLED < 6) // -------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est inférieur à 6
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "pt_buffer_TableauSequencesLED - 3" du tableau buffer 1
        buffer1_TableauSequencesLED[pt_buffer_TableauSequencesLED - 3] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
      else if (pt_buffer_TableauSequencesLED > 5) // -------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est supérieur à 5
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "6 + pt_buffer_TableauSequencesLED - 9" du tableau buffer 1
        buffer1_TableauSequencesLED[6 + pt_buffer_TableauSequencesLED - 9] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
    }
  }
  else if (Equations == 1) // ************************************************************************************************* // Si l'argument équations est égal à "1"
  {
    for (pt_buffer_TableauSequencesLED = 0; pt_buffer_TableauSequencesLED < NombreLED; pt_buffer_TableauSequencesLED++) // ++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (pt_buffer_TableauSequencesLED < 3) // ------------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est inférieur à 3
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "pt_buffer_TableauSequencesLED" du tableau buffer 1
        buffer1_TableauSequencesLED[pt_buffer_TableauSequencesLED] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
      else if (pt_buffer_TableauSequencesLED < 6) // -------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est inférieur à 6
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "pt_buffer_TableauSequencesLED + 6" du tableau buffer 1
        buffer1_TableauSequencesLED[pt_buffer_TableauSequencesLED + 6] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
      else if (pt_buffer_TableauSequencesLED > 5) // -------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est supérieur à 5
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "6 + pt_buffer_TableauSequencesLED - 9" du tableau buffer 1
        buffer1_TableauSequencesLED[6 + pt_buffer_TableauSequencesLED - 9] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
    }
  }
  else if (Equations == 2) // ************************************************************************************************* // Si l'argument équations est égal à "2"
  {
    for (pt_buffer_TableauSequencesLED = 0; pt_buffer_TableauSequencesLED < NombreLED; pt_buffer_TableauSequencesLED++) // ++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (pt_buffer_TableauSequencesLED < 3) // ------------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est inférieur à 3
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "3 - pt_buffer_TableauSequencesLED - 1" du tableau buffer 1
        buffer1_TableauSequencesLED[3 - pt_buffer_TableauSequencesLED - 1] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
      else if (pt_buffer_TableauSequencesLED < 6) // -------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est inférieur à 6
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "3 - pt_buffer_TableauSequencesLED + 11" du tableau buffer 1
        buffer1_TableauSequencesLED[3 - pt_buffer_TableauSequencesLED + 11] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
      else if (pt_buffer_TableauSequencesLED > 5) // -------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est supérieur à 5
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "6 + pt_buffer_TableauSequencesLED - 9" du tableau buffer 1
        buffer1_TableauSequencesLED[6 + pt_buffer_TableauSequencesLED - 9] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
    }
  }
  else if (Equations == 3) // ************************************************************************************************* // Si l'argument équations est égal à "3"
  {
    for (pt_buffer_TableauSequencesLED = 0; pt_buffer_TableauSequencesLED < NombreLED; pt_buffer_TableauSequencesLED++) // ++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (pt_buffer_TableauSequencesLED < 3) // ------------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est inférieur à 3
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "3 - pt_buffer_TableauSequencesLED + 8" du tableau buffer 1
        buffer1_TableauSequencesLED[3 - pt_buffer_TableauSequencesLED + 8] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
      else if (pt_buffer_TableauSequencesLED < 6) // -------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est inférieur à 6
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "3 - pt_buffer_TableauSequencesLED + 2" du tableau buffer 1
        buffer1_TableauSequencesLED[3 - pt_buffer_TableauSequencesLED + 2] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
      else if (pt_buffer_TableauSequencesLED > 5) // -------------------------------------------------------------------------- // Si le pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED est supérieur à 5
      {
                                                                                                                                // Transfère le contenu du tableau buffer de rang "pt_buffer_TableauSequencesLED" vers le rang "6 + pt_buffer_TableauSequencesLED - 9" du tableau buffer 1
        buffer1_TableauSequencesLED[6 + pt_buffer_TableauSequencesLED - 9] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
    }
  }
}
